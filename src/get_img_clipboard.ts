// reference: https://github.com/PicGo/PicGo-Core/blob/dev/src/utils/getClipboardImage.ts
import { spawn } from 'child_process'
import * as vscode from 'vscode';
import path = require('path')
import fs = require('fs')
import os = require('os')
import { globalCtx } from './globalctx';

export type Platform = 'darwin' | 'win32' | 'win10' | 'linux' | 'wsl'

const getCurrentPlatform = (): Platform => {
    const platform = process.platform

    if (platform === 'win32') {
        const currentOS = os.release().split('.')[0]
        if (currentOS === '10') return 'win10'
        else return 'win32'
    } else if (platform === 'darwin') {
        return 'darwin'
    } else {
        return 'linux'
    }
}

const readClipboardScript = (
    scriptName: 'mac.applescript' | 'linux.sh' | 'windows.ps1' | 'windows10.ps1' | 'wsl.sh'
) => {
    //var pwd = vscode.workspace.workspaceFolders?.[0].uri.path || __dirname;
    // test const filePath = globalCtx.extCtx.asAbsolutePath(`src/script/${scriptName}`)
    // 生产
    const filePath = globalCtx.extCtx.asAbsolutePath(`script/${scriptName}`)
    vscode.window.showErrorMessage("filepath is",filePath);
    return fs.readFileSync(filePath).toString()
}

const platform2ScriptContent = (): {
    [key in Platform]: string
} => ({
    darwin: readClipboardScript('mac.applescript'),
    win32: readClipboardScript('windows.ps1'),
    win10: readClipboardScript('windows10.ps1'),
    linux: readClipboardScript('linux.sh'),
    wsl: readClipboardScript('wsl.sh'),
})
/**
 * powershell will report error if file does not have a '.ps1' extension,
 * so we should keep the extension name consistent with corresponding shell
 */
const platform2ScriptFilename: {
    [key in Platform]: string
} = {
    darwin: 'mac.applescript',
    win32: 'windows.ps1',
    win10: 'windows10.ps1',
    linux: 'linux.sh',
    wsl: 'wsl.sh',
}

export interface IClipboardImg {
    imgPath: string
    /**
     * if the path is generated by the extension -> false
     * if the path is a real file path in system -> true
     */
    shouldKeepAfterUploading: boolean
}

const getClipboardImage = (): Promise<IClipboardImg> => {
    //var pwd = vscode.workspace.workspaceFolders?.[0].uri.path || __dirname;
    //vscode.window.showInformationMessage("pwd:" + pwd + ".");
    //const imagePath = path.join(pwd,"tmp.png");
    const imagePath = globalCtx.extCtx.asAbsolutePath("tmp.png");
    return new Promise<IClipboardImg>((resolve, reject): void => {
        const platform = getCurrentPlatform()
        const scriptPath = path.join(__dirname, platform2ScriptFilename[platform])
        // If the script does not exist yet, we need to write the content to the script file
        //console.log(platform2ScriptContent()[platform]);
        if (!fs.existsSync(scriptPath)) fs.writeFileSync(scriptPath, platform2ScriptContent()[platform], 'utf8')

        let execution
        if (platform === 'darwin') {
            execution = spawn('osascript', [scriptPath, imagePath])
        } else if (platform === 'win32' || platform === 'win10') {
            execution = spawn('powershell', [
                '-noprofile',
                '-noninteractive',
                '-nologo',
                '-sta',
                '-executionpolicy',
                'unrestricted',
                // fix windows 10 native cmd crash bug when "picgo upload"
                // https://github.com/PicGo/PicGo-Core/issues/32
                // '-windowstyle','hidden',
                // '-noexit',
                '-file',
                scriptPath,
                imagePath,
            ])
        } else {
            execution = spawn('sh', [scriptPath, imagePath])
        }

        vscode.window.showInformationMessage("3333");
        execution.stdout.on('data', (data: Buffer) => {
            if (platform === 'linux') {
                if (data.toString().trim() === 'no xclip') {
                    return reject(new Error('Please install xclip first'))
                }
            }
            const imgPath = data.toString().trim()

            // if the filePath is the real file in system
            // we should keep it instead of removing
            let shouldKeepAfterUploading = false

            // in macOS if your copy the file in system, it's basename will not equal to our default basename
            if (path.basename(imgPath) !== path.basename(imagePath)) {
                // if the path is not generate by picgo
                // but the path exists, we should keep it
                if (fs.existsSync(imgPath)) shouldKeepAfterUploading = true
            }
            // if the imgPath is invalid
            if (imgPath !== 'no image' && !fs.existsSync(imgPath)) return reject(new Error(`Can't find ${imgPath}`))

            resolve({
                imgPath,
                shouldKeepAfterUploading,
            })
        })
    })
}

export default getClipboardImage